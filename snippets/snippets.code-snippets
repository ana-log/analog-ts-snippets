{
  "Basic Slash Command ": {
    "prefix": "ancmd",
    "body": [
      "import {",
      "  Interaction,",
      "  EmbedBuilder,",
      "  CommandInteractionOptionResolver,",
      "  Message,",
      "  CommandInteraction,",
      "  ApplicationCommand,",
      "  SlashCommandBuilder,",
      "  SlashCommandStringOption,",
      "  ActionRowBuilder,",
      "  ButtonBuilder,",
      "  ButtonStyle,",
      "  MessageActionRowComponentBuilder,",
      "} from \"discord.js\";",
      "",
      "module.exports = {",
      "  data: new SlashCommandBuilder().setName(\"ping\").setDescription(\"pings you\"),",
      "",
      "  async execute(interaction: CommandInteraction) {",
      "    try {",
      "      // code here",
      "      await interaction.reply(\"pong\");",
      "    } catch (error) {",
      "      await interaction.reply({",
      "        content: \"There was an error\",",
      "        ephemeral: true,",
      "      });",
      "      console.error(error);",
      "    }",
      "  },",
      "};",
      ""
    ],
    "description": "Basic Slash Command "
  },
  "Basic Slash Command w/ Embed  ": {
    "prefix": "anembcmd",
    "body": [
      "import {",
      "  Interaction,",
      "  EmbedBuilder,",
      "  CommandInteractionOptionResolver,",
      "  Message,",
      "  CommandInteraction,",
      "  ApplicationCommand,",
      "  SlashCommandBuilder,",
      "  SlashCommandStringOption,",
      "  ActionRowBuilder,",
      "  ButtonBuilder,",
      "  ButtonStyle,",
      "  MessageActionRowComponentBuilder,",
      "} from \"discord.js\";",
      "",
      "module.exports = {",
      "  data: new SlashCommandBuilder()",
      "    .setName(\"$name\")",
      "    .setDescription(\"insert description here\"),",
      "",
      "  async execute(interaction: CommandInteraction) {",
      "    try {",
      "      //code here",
      "",
      "      const embed = new EmbedBuilder()",
      "        .setColor(`#6bde36`)",
      "        .setTitle(`Title Here`)",
      "        .setThumbnail(interaction.user?.avatarURL({ forceStatic: false })!)",
      "        .setURL(\"https://analog-ts.bossdaily.me/\")",
      "        .setAuthor({",
      "          name: \"Some name\",",
      "          iconURL: \"https://avatars.githubusercontent.com/u/110413696?s=200&v=4\",",
      "          url: \"https://analog-ts.bossdaily.me/\",",
      "        })",
      "        .setDescription(\"Some description here\")",
      "        .addFields(",
      "          { name: \"Regular field title\", value: \"Some value here\" },",
      "          { name: \"\\u200B\", value: \"\\u200B\" },",
      "          {",
      "            name: \"Inline field title\",",
      "            value: \"Some value here\",",
      "            inline: true,",
      "          },",
      "          { name: \"Inline field title\", value: \"Some value here\", inline: true }",
      "        )",
      "        .addFields({",
      "          name: \"Inline field title\",",
      "          value: \"Some value here\",",
      "          inline: true,",
      "        })",
      "        .setImage(\"https://avatars.githubusercontent.com/u/110413696?s=200&v=4\")",
      "        .setTimestamp()",
      "        .setFooter({",
      "          text: \"Some footer text here\",",
      "          iconURL: \"https://avatars.githubusercontent.com/u/110413696?s=200&v=4\",",
      "        });",
      "",
      "      await interaction.reply({ embeds: [embed] });",
      "    } catch (error) {",
      "      await interaction.reply({",
      "        content: \"There was an error executing this command\",",
      "        ephemeral: true,",
      "      });",
      "      console.error(error);",
      "    }",
      "  },",
      "};"
    ],
    "description": "Basic Slash Command w/ Embed  "
  },
  "Embed builder": {
    "prefix": "anembedbuilder",
    "body": [
      "new EmbedBuilder()",
      "        .setColor(`#6bde36`)",
      "        .setTitle(`Title Here`)",
      "        .setThumbnail(interaction.user?.avatarURL({ forceStatic: false })!)",
      "        .setURL(\"https://analog-ts.bossdaily.me/\")",
      "        .setAuthor({",
      "          name: \"Some name\",",
      "          iconURL: \"https://avatars.githubusercontent.com/u/110413696?s=200&v=4\",",
      "          url: \"https://analog-ts.bossdaily.me/\",",
      "        })",
      "        .setDescription(\"Some description here\")",
      "        .addFields(",
      "          { name: \"Regular field title\", value: \"Some value here\" },",
      "          { name: \"\\u200B\", value: \"\\u200B\" },",
      "          {",
      "            name: \"Inline field title\",",
      "            value: \"Some value here\",",
      "            inline: true,",
      "          },",
      "          { name: \"Inline field title\", value: \"Some value here\", inline: true }",
      "        )",
      "        .addFields({",
      "          name: \"Inline field title\",",
      "          value: \"Some value here\",",
      "          inline: true,",
      "        })",
      "        .setImage(\"https://avatars.githubusercontent.com/u/110413696?s=200&v=4\")",
      "        .setTimestamp()",
      "        .setFooter({",
      "          text: \"Some footer text here\",",
      "          iconURL: \"https://avatars.githubusercontent.com/u/110413696?s=200&v=4\",",
      "        });"
    ],
    "description": "Embed builder"
  },
  "Button Builder": {
    "prefix": "anbutton",
    "body": [
      "new ButtonBuilder()",
      "        .setCustomId(\"$name\")",
      "        .setEmoji(\"ðŸ¤–\")",
      "        .setStyle(ButtonStyle.Primary)",
      "        .setLabel(\"Put Label Here\");"
    ],
    "description": "Button Builder"
  },
  "Modal Builder": {
    "prefix": "anmodal",
    "body": [
      "new ModalBuilder()",
      "  .setTitle(`Modal Title`)",
      "  .setCustomId(\"modalId\")",
      "  .setComponents(",
      "    new ActionRowBuilder<ModalActionRowComponentBuilder>().addComponents(",
      "      new TextInputBuilder()",
      "        .setLabel(`Modal Label`)",
      "        .setStyle(TextInputStyle.Paragraph)",
      "        .setPlaceholder(`Modal Placeholder Text`)",
      "        .setCustomId(\"modal_id\")",
      "    )",
      "  )"
    ],
    "description": "Modal Builder"
  },
  "Select Menu Builder": {
    "prefix": "anselmenu",
    "body": [
      "new SelectMenuBuilder()",
      "  .setCustomId(\"selectMenuId\")",
      "  .setPlaceholder(\"Placeholder\")",
      "  .setOptions([",
      "    { label: \"option label\", value: \"option value\", emoji: \"ðŸ˜ƒ\" }",
      "  ]);"
    ],
    "description": "Select Menu Builder"
  },
  "Modal Interaction": {
    "prefix": "anmodalint",
    "body": [
      "import {",
      "  ButtonInteraction,",
      "  EmbedBuilder,",
      "  ModalSubmitInteraction,",
      "} from \"discord.js\";",
      "import { client } from \"../../../index\";",
      "",
      "module.exports = {",
      "  data: {",
      "    name: `$TM_FILENAME_BASE`,",
      "  },",
      "  async execute(interaction: ModalSubmitInteraction) {",
      "    try {",
      "      await interaction.reply(\"You submitted a modal\");",
      "    } catch (error) {",
      "      await interaction.reply({",
      "        content: \"There was an error with this modal\",",
      "        ephemeral: true,",
      "      });",
      "      console.error(error);",
      "    }",
      "  },",
      "};",
      ""
    ],
    "description": "Modal Interaction"
  },
  "Selection Menu Interaction": {
    "prefix": "anselectmenuint",
    "body": [
      "import {",
      "  ActionRow,",
      "  ActionRowBuilder,",
      "  ButtonInteraction,",
      "  EmbedBuilder,",
      "  ModalActionRowComponentBuilder,",
      "  ModalBuilder,",
      "  ModalSubmitInteraction,",
      "  SelectMenuInteraction,",
      "  TextInputBuilder,",
      "  TextInputStyle,",
      "} from \"discord.js\";",
      "import { client } from \"../../../index\";",
      "",
      "module.exports = {",
      "  data: {",
      "    name: `$TM_FILENAME_BASE`,",
      "  },",
      "  async execute(interaction: SelectMenuInteraction) {",
      "    try {",
      "      await interaction.reply('You used a select menu')",
      "    } catch (error) {",
      "      await interaction.reply({",
      "        content: \"There was an error with this selection menu\",",
      "        ephemeral: true,",
      "      });",
      "      console.error(error);",
      "    }",
      "  },",
      "};",
      ""
    ],
    "description": "Selection Menu Interaction"
  },
  "Button Interaction": {
    "prefix": "anbuttonint",
    "body": [
      "import {",
      "  ActionRowBuilder,",
      "  ButtonBuilder,",
      "  ButtonInteraction,",
      "  ButtonStyle,",
      "  EmbedBuilder,",
      "  MessageActionRowComponentBuilder,",
      "  SelectMenuBuilder,",
      "} from \"discord.js\";",
      "import { client } from \"../../../index\";",
      "",
      "module.exports = {",
      "  data: {",
      "    name: `$TM_FILENAME_BASE`,",
      "  },",
      "  async execute(interaction: ButtonInteraction) {",
      "    try {",
      "      await interaction.reply(\"You pressed a button!\");",
      "    } catch (error) {",
      "      await interaction.reply({",
      "        content: \"There was an error while pressing this button\",",
      "        ephemeral: true,",
      "      });",
      "      console.error(error);",
      "    }",
      "  },",
      "};",
      "",
      ""
    ],
    "description": "Button Interaction"
  },
  "Context Menu Interaction": {
    "prefix": "ancontextmenuint",
    "body": [
      "import {",
      "  Interaction,",
      "  EmbedBuilder,",
      "  CommandInteractionOptionResolver,",
      "  Message,",
      "  CommandInteraction,",
      "  ApplicationCommand,",
      "  SlashCommandBuilder,",
      "  SlashCommandStringOption,",
      "  ModalBuilder,",
      "  TextInputBuilder,",
      "  TextInputStyle,",
      "  ActionRowBuilder,",
      "  ModalActionRowComponent,",
      "  ModalActionRowComponentBuilder,",
      "  ChatInputCommandInteraction,",
      "  ContextMenuCommandInteraction,",
      "  ContextMenuCommandBuilder,",
      "  ApplicationCommandType,",
      "} from \"discord.js\";",
      "",
      "import { client } from \"../../index\";",
      "",
      "",
      "module.exports = {",
      "  data: new ContextMenuCommandBuilder()",
      "    .setName(\"$TM_FILENAME_BASE\")",
      "    .setType(ApplicationCommandType.User),",
      "",
      "  async execute(interaction: ContextMenuCommandInteraction) {",
      "    try {",
      "      await interaction.reply(\"Hello user\");",
      "    } catch (error) {",
      "      await interaction.reply({",
      "        content: \"This Context Menu Failed\",",
      "        ephemeral: true,",
      "      });",
      "      console.error(error);",
      "    }",
      "  },",
      "};",
      ""
    ],
    "description": "Context Menu Interaction"
  },
  "Slash Command Interaction With Option": {
    "prefix": "ancmdintoption",
    "body": [
      "import {",
      "  Interaction,",
      "  EmbedBuilder,",
      "  CommandInteractionOptionResolver,",
      "  Message,",
      "  CommandInteraction,",
      "  ApplicationCommand,",
      "  SlashCommandBuilder,",
      "  SlashCommandStringOption,",
      "  ModalBuilder,",
      "  TextInputBuilder,",
      "  TextInputStyle,",
      "  ActionRowBuilder,",
      "  ModalActionRowComponent,",
      "  ModalActionRowComponentBuilder,",
      "  ChatInputCommandInteraction,",
      "} from \"discord.js\";",
      "",
      "import { client } from \"../../index\";",
      "",
      "module.exports = {",
      "  data: new SlashCommandBuilder()",
      "    .setName(\"$TM_FILENAME_BASE\")",
      "    .setDescription(\"Put Description here\")",
      "    .addStringOption((option) =>",
      "      option",
      "        .setName(\"exampleName\")",
      "        .setDescription(",
      "          \"Put either their uuid or minecraft username in this field.\"",
      "        )",
      "        .setRequired(true)",
      "    ),",
      "",
      "  async execute(interaction: ChatInputCommandInteraction) {",
      "    const exampleName = interaction.options.getString(\"exampleName\");",
      "",
      "    try {",
      "      await interaction.reply(`${exampleName}`);",
      "    } catch (error) {",
      "      await interaction.reply({",
      "        content: \"command failed to send\",",
      "        ephemeral: true,",
      "      });",
      "      console.error(error);",
      "    }",
      "  },",
      "};",
      ""
    ],
    "description": "Slash Command Interaction With Option"
  },
  "String Option": {
    "prefix": "anstringoption",
    "body": [
      ".addStringOption((option) =>",
      "      option",
      "        .setName(\"exampleName\")",
      "        .setDescription(",
      "          \"Put a description here\"",
      "        )",
      "        .setRequired(true)",
      "    )"
    ],
    "description": "String Option"
  },
  "Boolean Option": {
    "prefix": "anbooleanoption",
    "body": [
      ".addBooleanOption((option) =>",
      "      option",
      "        .setName(\"exampleName\")",
      "        .setDescription(",
      "          \"Put a description here\"",
      "        )",
      "        .setRequired(true)",
      "    )"
    ],
    "description": "Boolean Option"
  },
  "User Option": {
    "prefix": "anuseroption",
    "body": [
      ".addUserOption((option) =>",
      "      option",
      "        .setName(\"exampleName\")",
      "        .setDescription(",
      "          \"Put a description here\"",
      "        )",
      "        .setRequired(true)",
      "    )"
    ],
    "description": "User Option"
  },
  "Channel Option": {
    "prefix": "anchanneloption",
    "body": [
      ".addChannelOption((option) =>",
      "      option",
      "        .setName(\"exampleName\")",
      "        .setDescription(",
      "          \"Put a description here\"",
      "        )",
      "        .setRequired(true)",
      "    )"
    ],
    "description": "Channel Option"
  },
  "Role Option": {
    "prefix": "anroleoption",
    "body": [
      ".addRoleOption((option) =>",
      "      option",
      "        .setName(\"exampleName\")",
      "        .setDescription(",
      "          \"Put a description here\"",
      "        )",
      "        .setRequired(true)",
      "    )"
    ],
    "description": "Role Option"
  },
  "Integer Option": {
    "prefix": "anintegeroption",
    "body": [
      ".addIntegerOption((option) =>",
      "      option",
      "        .setName(\"exampleName\")",
      "        .setDescription(",
      "          \"Put a description here\"",
      "        )",
      "        .setRequired(true)",
      "    )"
    ],
    "description": "Integer Option"
  },
  "Number Option": {
    "prefix": "annumberoption",
    "body": [
      ".addNumberOption((option) =>",
      "      option",
      "        .setName(\"exampleName\")",
      "        .setDescription(",
      "          \"Put a description here\"",
      "        )",
      "        .setRequired(true)",
      "    )"
    ],
    "description": "Number Option"
  },
  "Mentionable Option": {
    "prefix": "anmentionableoption",
    "body": [
      ".addMentionableOption((option) =>",
      "      option",
      "        .setName(\"exampleName\")",
      "        .setDescription(",
      "          \"Put a description here\"",
      "        )",
      "        .setRequired(true)",
      "    )"
    ],
    "description": "Mentionable Option"
  },
  "Attachment Option": {
    "prefix": "anattachmentoption",
    "body": [
      ".addAttachmentOption((option) =>",
      "      option",
      "        .setName(\"exampleName\")",
      "        .setDescription(",
      "          \"Put a description here\"",
      "        )",
      "        .setRequired(true)",
      "    )"
    ],
    "description": "Attachment Option"
  }
}
